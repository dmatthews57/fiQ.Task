using System;
using System.Collections.Generic;

namespace fiQ.Task.Models
{
	/// <summary>
	/// Container class for return data from a TaskAdapter's ExecuteTask function
	/// </summary>
	public class TaskResult
	{
		#region Fields
		private Dictionary<string, string> returnValues = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
		private List<Exception> exceptions = new List<Exception>();
		#endregion

		#region Properties
		/// <summary>
		/// Flag for overall success/failure of task
		/// </summary>
		public bool Success { get; set; } = false;

		/// <summary>
		/// Collection of output/return values (key/value pairs) generated by task execution
		/// </summary>
		public IReadOnlyDictionary<string, string> ReturnValues
		{
			get { return returnValues; }
		}

		/// <summary>
		/// List of exceptions raised during task execution
		/// </summary>
		public IEnumerable<Exception> Exceptions
		{
			get { return exceptions; }
		}
		#endregion

		#region Methods
		/// <summary>
		/// Add key/value pair to return values collection
		/// </summary>
		public void AddReturnValue(string name, string value)
		{
			returnValues[name] = value;
		}

		/// <summary>
		/// Add exception to list
		/// </summary>
		public void AddException(Exception ex)
		{
			exceptions.Add(ex);
		}
		#endregion
	}
}
